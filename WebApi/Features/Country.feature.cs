// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebApi.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Country")]
    public partial class CountryFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Country.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Country", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("country list")]
        [NUnit.Framework.CategoryAttribute("where")]
        public virtual void CountryList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("country list", new string[] {
                        "where"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have the Country data available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have Enumerate the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.Then("I should see the list belong to continent asia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("country list max of area")]
        [NUnit.Framework.CategoryAttribute("find")]
        public virtual void CountryListMaxOfArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("country list max of area", new string[] {
                        "find"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have the Country data available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.Then("I should see the largest country as India", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("country capital more than one word")]
        [NUnit.Framework.CategoryAttribute("space&regex")]
        public virtual void CountryCapitalMoreThanOneWord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("country capital more than one word", new string[] {
                        "space&regex"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I have the Country data available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.Then("I should see the capital with more than one word", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("verify list of fields available in country")]
        [NUnit.Framework.CategoryAttribute("comparetoinstance")]
        public virtual void VerifyListOfFieldsAvailableInCountry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("verify list of fields available in country", new string[] {
                        "comparetoinstance"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have the Country data available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Area",
                        "Capital",
                        "Continent"});
            table1.AddRow(new string[] {
                        "India",
                        "12345",
                        "New Delhi",
                        "Asia"});
#line 25
 testRunner.Then("I should see the following fields:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("verify list of field properties available in country")]
        [NUnit.Framework.CategoryAttribute("foreachvar")]
        public virtual void VerifyListOfFieldPropertiesAvailableInCountry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("verify list of field properties available in country", new string[] {
                        "foreachvar"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have the Country data available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "field_name"});
            table2.AddRow(new string[] {
                        "Name"});
            table2.AddRow(new string[] {
                        "Area"});
            table2.AddRow(new string[] {
                        "Capital"});
            table2.AddRow(new string[] {
                        "Continent"});
#line 32
 testRunner.Then("I should see the following field names:", ((string)(null)), table2, "Then ");
#line 38
 testRunner.And("I should see that data arranged in ascending order by country name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("verify that the country data is sorted by specific fields")]
        [NUnit.Framework.TestCaseAttribute("Name", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Area", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Capital", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Continent", new string[0])]
        public virtual void VerifyThatTheCountryDataIsSortedBySpecificFields(string fieldname, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("verify that the country data is sorted by specific fields", exampleTags);
#line 40
 this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I have the Country data available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "field_name"});
            table3.AddRow(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "Area"});
            table3.AddRow(new string[] {
                        "Capital"});
            table3.AddRow(new string[] {
                        "Continent"});
#line 42
 testRunner.Then(string.Format("I should see the country data sorted by field {0}:", fieldname), ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
